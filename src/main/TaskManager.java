import java.util.List;

/**
 * Интерфейс, определяющий контракт для любого менеджера задач.
 * Предоставляет методы для управления задачами, эпиками и подзадачами:
 * создание, получение, обновление, удаление (CRUD-операции),
 * а также дополнительные функции, такие как получение подзадач эпика.
 * Любой класс, реализующий этот интерфейс, должен предоставить
 * собственную логику для хранения и обработки задач.
 */
public interface TaskManager {
    /**
     * Возвращает список всех обычных задач.
     *
     * @return Список объектов {@link Task}.
     */
    List<Task> getAllTasks();

    /**
     * Удаляет все обычные задачи из хранилища.
     */
    void removeAllTasks();

    /**
     * Получает обычную задачу по её уникальному идентификатору.
     *
     * @param id Идентификатор задачи.
     * @return Объект {@link Task}, соответствующий указанному ID, или {@code null}, если задача не найдена.
     */
    Task getTaskById(int id);

    /**
     * Создаёт новую обычную задачу.
     * Менеджер задач присваивает уникальный ID и сохраняет задачу.
     *
     * @param task Объект {@link Task} для создания.
     * @return Созданная задача с присвоенным ID.
     */
    Task createTask(Task task);

    /**
     * Обновляет существующую обычную задачу.
     * Задача для обновления идентифицируется по её ID.
     *
     * @param task Объект {@link Task} с обновлёнными данными и корректным ID.
     */
    void updateTask(Task task);

    /**
     * Удаляет обычную задачу по её идентификатору.
     *
     * @param id Идентификатор задачи для удаления.
     */
    void deleteTaskById(int id);

    /**
     * Возвращает список всех эпиков.
     *
     * @return Список объектов {@link Epic}.
     */
    List<Epic> getAllEpics();

    /**
     * Удаляет все эпики из хранилища.
     * При удалении эпиков также удаляются все подзадачи, которые были связаны с удаленными эпиками.
     */
    void removeAllEpics();

    /**
     * Получает эпик по его уникальному идентификатору.
     *
     * @param id Идентификатор эпика.
     * @return Объект {@link Epic}, соответствующий указанному ID, или {@code null}, если эпик не найден.
     */
    Epic getEpicById(int id);

    /**
     * Создаёт новый эпик.
     * Менеджер задач присваивает уникальный ID и сохраняет эпик.
     * Статус эпика автоматически рассчитывается менеджером.
     *
     * @param epic Объект {@link Epic} для создания.
     * @return Созданный эпик с присвоенным ID.
     */
    Epic createEpic(Epic epic);

    /**
     * Обновляет существующий эпик.
     * Эпик для обновления идентифицируется по его ID.
     * Обновляются только название и описание эпика; список подзадач и статус управляются менеджером.
     *
     * @param epic Объект {@link Epic} с обновлёнными данными и корректным ID.
     */
    void updateEpic(Epic epic);

    /**
     * Удаляет эпик по его идентификатору.
     * Также удаляет все подзадачи, которые были связаны с этим эпиком.
     *
     * @param id Идентификатор эпика для удаления.
     * @return Удаленный объект {@link Epic}, или {@code null}, если эпик не найден.
     */
    Epic deleteEpicById(int id);

    /**
     * Возвращает список всех подзадач.
     *
     * @return Список объектов {@link Subtask}.
     */
    List<Subtask> getAllSubtasks();

    /**
     * Удаляет все подзадачи из хранилища.
     * После удаления всех подзадач статусы соответствующих родительских эпиков обновляются.
     */
    void removeAllSubtasks();

    /**
     * Получает подзадачу по её уникальному идентификатору.
     *
     * @param id Идентификатор подзадачи.
     * @return Объект {@link Subtask}, соответствующий указанному ID, или {@code null}, если подзадача не найдена.
     */
    Subtask getSubtaskById(int id);

    /**
     * Создаёт новую подзадачу.
     * Подзадаче присваивается уникальный ID. Она связывается с указанным эпиком.
     * Статус родительского эпика обновляется.
     *
     * @param subtask Объект {@link Subtask} для создания. ID эпика должен быть корректным.
     * @return Созданная подзадача с присвоенным ID или {@code null}, если родительский эпик не найден.
     */
    Subtask createSubtask(Subtask subtask);

    /**
     * Обновляет существующую подзадачу.
     * Подзадача для обновления идентифицируется по ID внутри объекта subtask.
     * Если ID родительского эпика изменился, подзадача перепривязывается.
     * Статусы затронутых эпиков обновляются.
     *
     * @param subtask Объект {@link Subtask} с обновлёнными данными и корректным ID.
     */
    void updateSubtask(Subtask subtask);

    /**
     * Удаляет подзадачу по её идентификатору.
     * Статус родительского эпика обновляется.
     *
     * @param id Идентификатор подзадачи для удаления.
     */
    void deleteSubtaskById(int id);

    /**
     * Получает список всех подзадач указанного эпика.
     *
     * @param epicId Идентификатор эпика, подзадачи которого нужно получить.
     * @return Список подзадач ({@link Subtask}) для данного эпика или пустой список, если эпик не найден или у него нет подзадач.
     */
    List<Subtask> getEpicSubtasks(int epicId);
}
